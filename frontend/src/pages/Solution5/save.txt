import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Search, Plus, Edit2, Trash2, Eye, User, Mail, Phone, 
   Calendar,  Grid, List, LayoutGrid,
  ChevronLeft, ChevronRight, X, Upload, Briefcase, Building2
} from 'lucide-react';
import Swal from 'sweetalert2';
import { useTheme } from '../../contexts/ThemeContext';
import { 
  Container, Header, Title, Controls, SearchWrapper, SearchInput,
  ActionButton, ViewToggle, ViewButton, MainContent, TableView,
  CardGrid, ListView, Card, CardImage, CardContent, CardInfo,
  CardActions, ListItem, ListImage, ListContent, ListInfo,
  ListActions, Pagination, PageInfo, PageButton, Modal, ModalContent,
  ModalHeader, ModalTitle, ModalBody, Form, FormGroup, Label,
  Input, Select, FileInput, FileLabel, ButtonGroup, SubmitButton,
  CancelButton, EmptyState, LoadingState, RowSelector,
  CloseButton, FormSection, SectionTitle, FormRow,
  ProfilePhotoSection, ProfilePhotoWrapper, ProfilePhoto,
  ProfilePhotoPlaceholder, TextArea
} from 'components/solution5/styles';

interface User {
  id: string;
  avatar_url?: string;
  display_name: string;
  title?: string;
  first_name: string;
  middle_name?: string;
  last_name: string;
  citizen_id?: string;
  birth_date?: string;
  blood_type?: string;
  gender?: string;
  mobile_no?: string;
  address?: string;
  username: string;
  email: string;
  role?: string;
  department?: string;
  created_at?: string;
  created_by?: string;
  updated_at?: string;
  updated_by?: string;
}

type ViewMode = 'table' | 'card' | 'list';

export const Solution5: React.FC = () => {
  const { t, i18n } = useTranslation();
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [viewMode, setViewMode] = useState<ViewMode>('table');
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [totalUsers, setTotalUsers] = useState(0); // still used for fallback/compat
  const [totalPages, setTotalPages] = useState(1);
  const [showModal, setShowModal] = useState(false);
  const [modalMode, setModalMode] = useState<'create' | 'edit' | 'view'>('create');
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [formData, setFormData] = useState<Partial<User>>({});
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [formErrors, setFormErrors] = useState<{ [key: string]: string }>({});

  const baseUrl = process.env.REACT_APP_API_URL;


  const fetchUsers = useCallback(async () => {
    setLoading(true);
    try {
      const start = (currentPage - 1) * rowsPerPage;
      const response = await fetch(
        `${baseUrl}/api/v1/user/?q=${searchQuery}&start=${start}&limit=${rowsPerPage}`
      );
      const data = await response.json();
      // New API: { data: [...], total_pages: n }
      if (Array.isArray(data.data) && typeof data.total_pages === 'number') {
        setUsers(data.data);
        setTotalPages(data.total_pages);
        setTotalUsers(data.data.length); // for fallback/compat
      } else if (Array.isArray(data.items) && typeof data.total === 'number') {
        setUsers(data.items);
        setTotalUsers(data.total);
        setTotalPages(Math.ceil(data.total / rowsPerPage));
      } else if (Array.isArray(data) && typeof data.length === 'number') {
        setUsers(data);
        setTotalUsers(data.length); // fallback if backend returns array only
        setTotalPages(1);
      } else {
        setUsers([]);
        setTotalUsers(0);
        setTotalPages(1);
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: t('error'),
        text: t('fetchError'),
      });
    } finally {
      setLoading(false);
    }
  }, [searchQuery, currentPage, rowsPerPage, t]);

  useEffect(() => {
    fetchUsers();
  }, [fetchUsers]);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handleRowsPerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setRowsPerPage(Number(e.target.value));
    setCurrentPage(1);
  };

  const handleCreate = () => {
    setModalMode('create');
    setSelectedUser(null);
    setFormData({});
    setSelectedFile(null);
    setShowModal(true);
  };

  const handleEdit = (user: User) => {
    setModalMode('edit');
    setSelectedUser(user);
    setFormData(user);
    setSelectedFile(null);
    setShowModal(true);
  };

  const handleView = async (user: User) => {
    setModalMode('view');
    setShowModal(true);
    setSelectedUser(null);
    setFormData({});
    try {
      const response = await fetch(`${baseUrl}/api/v1/user/${user.id}`);
      if (!response.ok) throw new Error('Failed to fetch user');
      const data = await response.json();
      setSelectedUser(data);
      setFormData(data);
    } catch (err) {
      Swal.fire({
        icon: 'error',
        title: t('error'),
        text: t('fetchError'),
      });
      setShowModal(false);
    }
  };

  const handleDelete = async (user: User) => {
    const result = await Swal.fire({
      title: t('deleteConfirm'),
      text: t('deleteWarning', { name: user.display_name }),
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: t('delete'),
      cancelButtonText: t('cancel'),
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch(`${baseUrl}/api/v1/user/${user.id}`, {
          method: 'DELETE',
        });

        if (response.ok) {
          Swal.fire(t('deleted'), t('deleteSuccess'), 'success');
          fetchUsers();
        } else {
          throw new Error('Delete failed');
        }
      } catch (error) {
        Swal.fire(t('error'), t('deleteError'), 'error');
      }
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
      setFormErrors((prev) => ({ ...prev, avatar_url: '' }));
    }
  };

  const handleRemoveFile = () => {
    setSelectedFile(null);
    setFormData({ ...formData, avatar_url: undefined });
  };

  const validateForm = () => {
    const errors: { [key: string]: string } = {};
    // Email
    if (!formData.email || !/^\S+@\S+\.\S+$/.test(formData.email)) {
      errors.email = t('userpage.errorEmail') || 'Invalid email format';
    }
    // Mobile
    if (formData.mobile_no && !/^\d{10}$/.test(formData.mobile_no)) {
      errors.mobile_no = t('userpage.errorMobile') || 'Mobile number must be 10 digits';
    }
    // Citizen ID
    if (formData.citizen_id && !/^\d{13}$/.test(formData.citizen_id)) {
      errors.citizen_id = t('userpage.errorCitizenId') || 'Citizen ID must be 13 digits';
    }
    // First name
    if (!formData.first_name) {
      errors.first_name = t('userpage.errorFirstName') || 'First name is required';
    }
    // Last name
    if (!formData.last_name) {
      errors.last_name = t('userpage.errorLastName') || 'Last name is required';
    }
    // Username
    if (!formData.username) {
      errors.username = t('userpage.errorUsername') || 'Username is required';
    }
    // File type
    if (selectedFile && !selectedFile.type.match(/^image\/(jpeg|png|jpg|gif)$/)) {
      errors.avatar_url = t('userpage.errorAvatarType') || 'Invalid image type';
    }
    return errors;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const errors = validateForm();
    setFormErrors(errors);
    if (Object.keys(errors).length > 0) return;

    const formDataToSend = new FormData();
    Object.entries(formData).forEach(([key, value]) => {
      if (value !== null && value !== undefined) {
        formDataToSend.append(key, value.toString());
      }
    });
    if (selectedFile) {
      formDataToSend.append('file', selectedFile);
    }
    try {
      const url = modalMode === 'create' 
        ? `${baseUrl}/api/v1/user/`
        : `${baseUrl}/api/v1/user/${selectedUser?.id}`;
      const response = await fetch(url, {
        method: modalMode === 'create' ? 'POST' : 'PUT',
        body: formDataToSend,
      });
      if (response.ok) {
      Swal.fire({
  icon: 'success',
  title: 'Success',
  text: modalMode === 'create' ? 'Create success' : 'Update success',
});
setShowModal(false);
fetchUsers();
} else {
  const error = await response.json();
  throw new Error(error.detail || 'Operation failed');
}
} catch (error: any) {
  Swal.fire({
    icon: 'error',
    title: 'Error',
    text: error.message || 'Operation failed',
  });
}
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };
const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
  setFormData({
    ...formData,
    [e.target.name]: e.target.value,
  });
};
  // Use avatar_url as is (already a full URL from backend)
  const getUserImage = (user: User): string | undefined => {
    if (user.avatar_url) {
      return user.avatar_url;
    }
    // Show initials if no avatar_url
    return undefined;
  };

  // Format date as dd/mm/yyyy
  const formatDate = (dateString?: string) => {
    if (!dateString) return '-';
    const d = new Date(dateString);
    if (isNaN(d.getTime())) return '-';
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const year = d.getFullYear();
    return `${day}/${month}/${year}`;
  };

  // Pagination: now comes from backend (totalPages)

  const renderTableView = () => (
    <TableView>
      <table>
        <thead>
          <tr>
          
            <th>{t('userpage.firstname')}</th>
            <th>{t('userpage.lastname')}</th>
            <th>{t('userpage.email')}</th>
            <th>{t('userpage.department')}</th>
            <th>{t('userpage.role')}</th>
            <th>{t('userpage.create_at')}</th>
            <th>{t('userpage.actions')}</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id}>
             
             
              <td>{user.first_name || '-'}</td>
               <td>{user.last_name || '-'}</td>
              <td>{user.email || '-'}</td>
              <td>{user.department || '-'}</td>
              <td>{user.role || '-'}</td>
              <td>{user.created_at || '-'}</td>
              
              <td>
                <ActionButton onClick={() => handleView(user)} title={t('userpage.view')} style={{ background: 'none' }}>
                  <Eye size={16} style={{ color: '#3b82f6' }} />
                </ActionButton>
                <ActionButton onClick={() => handleEdit(user)} title={t('userpage.edit')} style={{ background: 'none' }}>
                  <Edit2 size={16} style={{ color: '#f59e42' }} />
                </ActionButton>
                <ActionButton 
                  onClick={() => handleDelete(user)} 
                  title={t('userpage.delete')}
                  className="delete"
                  style={{ background: 'none' }}
                  onMouseOver={e => (e.currentTarget.firstChild && ((e.currentTarget.firstChild as HTMLElement).style.color = '#b91c1c'))}
                  onMouseOut={e => (e.currentTarget.firstChild && ((e.currentTarget.firstChild as HTMLElement).style.color = '#ef4444'))}
                >
                  <Trash2 size={16} style={{ color: '#ef4444', transition: 'color 0.2s' }} />
                </ActionButton>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </TableView>
  );

  const renderCardView = () => (
    <CardGrid>
      {users.map((user) => (
        <Card key={user.id} style={{ minHeight: 260, display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>
          <CardImage src={getUserImage(user)} alt={user.display_name} />
          <CardContent>
            <h3>{user.display_name}</h3>
            <CardInfo style={{ minHeight: 110, display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>
              <span><User size={14} /> {user.username}</span>
              <span><Mail size={14} /> {user.email}</span>
              <span><Phone size={14} /> {user.mobile_no || '-'}</span>
              <span><Calendar size={14} /> {formatDate(user.birth_date)}</span>
              <span><Building2 size={14} /> {user.department || '-'}</span>
              <span><Briefcase size={14} /> {user.role || '-'}</span>
            </CardInfo>
          </CardContent>
          <CardActions>
            <ActionButton onClick={() => handleView(user)} title={t('userpage.view')} style={{ background: 'none' }}>
              <Eye size={16} style={{ color: '#3b82f6' }} />
            </ActionButton>
            <ActionButton onClick={() => handleEdit(user)} title={t('userpage.edit')} style={{ background: 'none' }}>
              <Edit2 size={16} style={{ color: '#f59e42' }} />
            </ActionButton>
            <ActionButton 
              onClick={() => handleDelete(user)} 
              title={t('userpage.delete')}
              className="delete"
              style={{ background: 'none' }}
              onMouseOver={e => (e.currentTarget.firstChild && ((e.currentTarget.firstChild as HTMLElement).style.color = '#b91c1c'))}
              onMouseOut={e => (e.currentTarget.firstChild && ((e.currentTarget.firstChild as HTMLElement).style.color = '#ef4444'))}
            >
              <Trash2 size={16} style={{ color: '#ef4444', transition: 'color 0.2s' }} />
            </ActionButton>
          </CardActions>
        </Card>
      ))}
    </CardGrid>
  );

  const renderListView = () => (
    <ListView>
      {users.map((user) => (
        <ListItem key={user.id} style={{ minHeight: 110, display: 'flex', alignItems: 'center' }}>
          <ListImage src={getUserImage(user)} alt={user.display_name} />
          <ListContent style={{ minHeight: 90, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
            <h3>{user.display_name}</h3>
            <ListInfo style={{ display: 'flex', flexWrap: 'wrap', gap: 12 }}>
              <span><User size={14} /> {user.username}</span>
              <span><Mail size={14} /> {user.email}</span>
              <span><Phone size={14} /> {user.mobile_no || '-'}</span>
              <span><Calendar size={14} /> {formatDate(user.birth_date)}</span>
              <span><Building2 size={14} /> {user.department || '-'}</span>
              <span><Briefcase size={14} /> {user.role || '-'}</span>
            </ListInfo>
          </ListContent>
          <ListActions>
            <ActionButton onClick={() => handleView(user)} title={t('userpage.view')} style={{ background: 'none' }}>
              <Eye size={16} style={{ color: '#3b82f6' }} />
            </ActionButton>
            <ActionButton onClick={() => handleEdit(user)} title={t('userpage.edit')} style={{ background: 'none' }}>
              <Edit2 size={16} style={{ color: '#f59e42' }} />
            </ActionButton>
            <ActionButton 
              onClick={() => handleDelete(user)} 
              title={t('userpage.delete')}
              className="delete"
              style={{ background: 'none' }}
              onMouseOver={e => (e.currentTarget.firstChild && ((e.currentTarget.firstChild as HTMLElement).style.color = '#b91c1c'))}
              onMouseOut={e => (e.currentTarget.firstChild && ((e.currentTarget.firstChild as HTMLElement).style.color = '#ef4444'))}
            >
              <Trash2 size={16} style={{ color: '#ef4444', transition: 'color 0.2s' }} />
            </ActionButton>
          </ListActions>
        </ListItem>
      ))}
    </ListView>
  );

  const renderContent = () => {
    if (loading) {
      return <LoadingState>{t('userpage.loading')}</LoadingState>;
    }

    if (users.length === 0) {
      return <EmptyState>{t('userpage.noData')}</EmptyState>;
    }

    switch (viewMode) {
      case 'table':
        return renderTableView();
      case 'card':
        return renderCardView();
      case 'list':
        return renderListView();
      default:
        return null;
    }
  };

  const { themeMode } = useTheme();

  // Modal action button style (for consistent scale, color, height)
  const modalActionBtnStyle = `
    .modal-action-btn {
      height: 44px;
      min-width: 120px;
      font-size: 16px;
      border-radius: 8px;
      font-weight: 500;
      box-shadow: none;
      margin-left: 0;
      margin-right: 0;
      transition: background 0.15s, color 0.15s;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }
    .modal-action-btn.cancel {
      background: #f3f4f6;
      color: #374151;
      border: 1px solid #d1d5db;
    }
    .modal-action-btn.submit {
      background: #2563eb;
      color: #fff;
      border: none;
    }
    .modal-action-btn:active {
      opacity: 0.9;
    }
  `;

  return (
    <>
      <style>{modalActionBtnStyle}</style>
      <Container data-theme={themeMode}>
      <Header>
        <Title>{t('userpage.userManagement')}</Title>
        <Controls>
          <SearchWrapper>
            <Search size={20} />
            <SearchInput
              type="text"
              placeholder={t('userpage.search')}
              value={searchQuery}
              onChange={handleSearch}
            />
          </SearchWrapper>
          <RowSelector>
            <label>{t('userpage.rowsPerPage')}</label>
            <select value={rowsPerPage} onChange={handleRowsPerPageChange}>
              <option value="1">1</option>
              <option value="5">5</option>
              <option value="10">10</option>
              <option value="20">20</option>
              <option value="50">50</option>
            </select>
          </RowSelector>
          <ViewToggle>
            <ViewButton
              active={viewMode === 'table'}
              onClick={() => setViewMode('table')}
              title={t('userpage.tableView')}
            >
              <LayoutGrid size={20} />
            </ViewButton>
            <ViewButton
              active={viewMode === 'card'}
              onClick={() => setViewMode('card')}
              title={t('userpage.cardView')}
            >
              <Grid size={20} />
            </ViewButton>
            <ViewButton
              active={viewMode === 'list'}
              onClick={() => setViewMode('list')}
              title={t('userpage.listView')}
            >
              <List size={20} />
            </ViewButton>
          </ViewToggle>
          <ActionButton className="primary" onClick={handleCreate}>
            <Plus size={20} />
            {t('userpage.addUser')}
          </ActionButton>
        </Controls>
      </Header>

      <MainContent>{renderContent()}</MainContent>

      <Pagination>
        <PageButton
          onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
          disabled={currentPage === 1}
        >
          <ChevronLeft size={20} />
        </PageButton>
        <PageInfo>
          {t('userpage.page')} {currentPage} {t('userpage.of')} {totalPages}
        </PageInfo>
        <PageButton
          onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
          disabled={currentPage === totalPages}
        >
          <ChevronRight size={20} />
        </PageButton>
      </Pagination>

{showModal && (
  <Modal onClick={() => setShowModal(false)}>
    <ModalContent onClick={(e) => e.stopPropagation()}>
      <ModalHeader>
        <ModalTitle>
          {modalMode === 'create' && t('userpage.createUser')}
          {modalMode === 'edit' && t('userpage.editUser')}
          {modalMode === 'view' && t('userpage.viewUser')}
        </ModalTitle>
        <CloseButton onClick={() => setShowModal(false)}>
          <X size={20} />
        </CloseButton>
      </ModalHeader>
      
      <ModalBody>
        <Form onSubmit={handleSubmit}>
          {/* Profile Photo Section */}
          <ProfilePhotoSection>
            <ProfilePhotoWrapper>

              {/* Show preview only in edit/create, always use backend avatar_url in view mode */}
              {modalMode === 'view' ? (
                getUserImage(selectedUser || formData as User) ? (
                  <ProfilePhoto
                    src={getUserImage(selectedUser || formData as User)}
                    alt={(selectedUser?.display_name || formData.display_name || '')}
                  />
                ) : (
                  <ProfilePhotoPlaceholder>
                    {((selectedUser?.username || formData.username) && (selectedUser?.last_name || formData.last_name)) ? (
                      <span style={{ fontSize: 32, fontWeight: 600 }}>
                        {((selectedUser?.username || formData.username) as string)[0]?.toUpperCase()}
                        {((selectedUser?.last_name || formData.last_name) as string)[0]?.toUpperCase()}
                      </span>
                    ) : <User size={40} />}
                  </ProfilePhotoPlaceholder>
                )
              ) : (selectedFile || formData.avatar_url) ? (
                <ProfilePhoto
                  src={selectedFile ? URL.createObjectURL(selectedFile) : getUserImage(formData as User)}
                  alt={formData.display_name || ''}
                />
              ) : (
                <ProfilePhotoPlaceholder>
                  {(formData.username && formData.last_name) ? (
                    <span style={{ fontSize: 32, fontWeight: 600 }}>
                      {formData.username[0]?.toUpperCase()}{formData.last_name[0]?.toUpperCase()}
                    </span>
                  ) : <User size={40} />}
                </ProfilePhotoPlaceholder>
              )}
              
              {modalMode !== 'view' && (
                <FileInput style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', minHeight: 40 }}>
                  {selectedFile || formData.avatar_url ? (
                    <button
                      type="button"
                      onClick={handleRemoveFile}
                      style={{
                        background: '#dc2626',
                        border: 'none',
                        color: '#fff',
                        cursor: 'pointer',
                        padding: 4,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        borderRadius: '50%',
                        width: 32,
                        height: 32,
                        marginLeft: 'auto',
                        marginRight: 0,
                        boxShadow: '0 2px 8px rgba(0,0,0,0.08)'
                      }}
                      title={t('userpage.removePhoto') || 'Remove'}
                    >
                      <X size={20} color="#fff" />
                    </button>
                  ) : (
                    <>
                      <input
                        type="file"
                        id="avatar_url"
                        accept="image/*"
                        onChange={handleFileChange}
                      />
                      <FileLabel htmlFor="avatar_url" style={{ marginLeft: 'auto', marginRight: 0 }}>
                        <Upload size={16} />
                      </FileLabel>
                    </>
                  )}
                </FileInput>
              )}
            </ProfilePhotoWrapper>
          </ProfilePhotoSection>

          {/* Account & Login Section */}
          <FormSection>
            <SectionTitle>{t('userpage.accountLogin')}</SectionTitle>
            <FormRow>
              <FormGroup>
                <Label>{t('userpage.username')}<span>*</span></Label>
                <Input
                  type="text"
                  name="username"
                  value={formData.username || ''}
                  onChange={handleInputChange}
                  placeholder={t('userpage.usernamePlaceholder')}
                  required
                  maxLength={20}
                  disabled={modalMode === 'view'}
                />
                {formErrors.username && <div style={{ color: 'red', fontSize: 12 }}>{formErrors.username}</div>}
              </FormGroup>
              <FormGroup>
                <Label>{t('userpage.displayName')}</Label>
                <Input
                  type="text"
                  name="display_name"
                  value={formData.display_name || ''}
                  onChange={handleInputChange}
                  placeholder={t('userpage.displayNamePlaceholder')}
                  maxLength={20}
                  disabled={modalMode === 'view'}
                />
              </FormGroup>
            </FormRow>
            <FormRow>
              <FormGroup>
                <Label>{t('userpage.email')}<span>*</span></Label>
                <Input
                  type="email"
                  name="email"
                  value={formData.email || ''}
                  onChange={handleInputChange}
                  placeholder={t('userpage.emailPlaceholder')}
                  required
                  maxLength={30}
                  disabled={modalMode === 'view'}
                />
                {formErrors.email && <div style={{ color: 'red', fontSize: 12 }}>{formErrors.email}</div>}
              </FormGroup>
            </FormRow>
          </FormSection>

          {/* Personal Details Section */}
          <FormSection>
            <SectionTitle>{t('userpage.personalDetails')}</SectionTitle>
            {/* Name Row - Title, First, Middle, Last in one row */}
          <FormRow style={{ gridTemplateColumns: 'minmax(100px, 0.7fr) 1.5fr 0.6fr 1.5fr', marginBottom: '24px' }}>
  <FormGroup>
    <Label>{t('userpage.title')}</Label>
    <Select
      name="title"
      value={formData.title || ''}
      onChange={handleInputChange}
      disabled={modalMode === 'view'}
    >
      <option value="">{t('userpage.selectTitle')}</option>
      <option value="Mr.">{t('userpage.mr')}</option>
      <option value="Mrs.">{t('userpage.mrs')}</option>
      <option value="Ms.">{t('userpage.ms')}</option>
      <option value="Dr.">{t('userpage.dr')}</option>
      <option value="Prof.">{t('userpage.prof')}</option>
    </Select>
  </FormGroup>
  
  <FormGroup>
    <Label>{t('userpage.firstName')}<span>*</span></Label>
    <Input
      type="text"
      name="first_name"
      value={formData.first_name || ''}
      onChange={handleInputChange}
      placeholder={t('userpage.firstNamePlaceholder')}
      required
      maxLength={20}
      disabled={modalMode === 'view'}
    />
    {formErrors.first_name && <div style={{ color: 'red', fontSize: 12 }}>{formErrors.first_name}</div>}
  </FormGroup>
  
<FormGroup style={{ maxWidth: '100px' }}>
  <Label>{t('userpage.middleName')}</Label>
  <Input
    type="text"
    name="middle_name"
    value={formData.middle_name || ''}
    onChange={handleInputChange}
    placeholder={t('userpage.middleNamePlaceholder')}
    maxLength={5}
    disabled={modalMode === 'view'}
  />
</FormGroup>

  
  <FormGroup>
    <Label>{t('userpage.lastName')}<span>*</span></Label>
    <Input
      type="text"
      name="last_name"
      value={formData.last_name || ''}
      onChange={handleInputChange}
      placeholder={t('userpage.lastNamePlaceholder')}
      required
      maxLength={20}
      disabled={modalMode === 'view'}
    />
    {formErrors.last_name && <div style={{ color: 'red', fontSize: 12 }}>{formErrors.last_name}</div>}
  </FormGroup>
</FormRow>
            
            <FormRow>
              <FormGroup>
                <Label>{t('userpage.citizenId')}</Label>
                <Input
                  type="text"
                  name="citizen_id"
                  value={formData.citizen_id || ''}
                  onChange={e => {
                    // Only allow digits, max 13
                    const val = e.target.value.replace(/\D/g, '').slice(0, 13);
                    setFormData({ ...formData, citizen_id: val });
                    setFormErrors((prev) => ({ ...prev, citizen_id: '' }));
                  }}
                  maxLength={13}
                  inputMode="numeric"
                  pattern="[0-9]{13}"
                  placeholder={t('userpage.citizenIdPlaceholder')}
                  disabled={modalMode === 'view'}
                />
                {formErrors.citizen_id && <div style={{ color: 'red', fontSize: 12 }}>{formErrors.citizen_id}</div>}
              </FormGroup>
              <FormGroup>
                <Label>{t('userpage.mobileNo')}</Label>
                <Input
                  type="tel"
                  name="mobile_no"
                  value={formData.mobile_no || ''}
                  onChange={e => {
                    // Only allow digits, max 10
                    const val = e.target.value.replace(/\D/g, '').slice(0, 10);
                    setFormData({ ...formData, mobile_no: val });
                    setFormErrors((prev) => ({ ...prev, mobile_no: '' }));
                  }}
                  maxLength={10}
                  inputMode="numeric"
                  pattern="[0-9]{10}"
                  placeholder={t('userpage.mobileNoPlaceholder')}
                  disabled={modalMode === 'view'}
                />
                {formErrors.mobile_no && <div style={{ color: 'red', fontSize: 12 }}>{formErrors.mobile_no}</div>}
              </FormGroup>
              <FormGroup>
                <Label>{t('userpage.birthDate')}</Label>
                <Input
                  type="date"
                  name="birth_date"
                  value={formData.birth_date ? formData.birth_date.split('T')[0] : ''}
                  onChange={handleInputChange}
                  disabled={modalMode === 'view'}
                />
              </FormGroup>
            </FormRow>

            <FormRow>
              <FormGroup>
                <Label>{t('userpage.gender')}</Label>
                <Select
                  name="gender"
                  value={formData.gender || ''}
                  onChange={handleInputChange}
                  disabled={modalMode === 'view'}
                >
                  <option value="">{t('userpage.selectGender')}</option>
                  <option value="Male">{t('userpage.male')}</option>
                  <option value="Female">{t('userpage.female')}</option>
                  <option value="Other">{t('userpage.other')}</option>
                  <option value="Prefer not to say">{t('userpage.preferNotToSay')}</option>
                </Select>
              </FormGroup>
              <FormGroup>
                <Label>{t('userpage.bloodType')}</Label>
                <Select
                  name="blood_type"
                  value={formData.blood_type || ''}
                  onChange={handleInputChange}
                  disabled={modalMode === 'view'}
                >
                  <option value="">{t('userpage.selectBloodType')}</option>
                  <option value="A">A</option>
                  <option value="B">B</option>
                  <option value="AB">AB</option>
                  <option value="O">O</option>
                  <option value="A+">A+</option>
                  <option value="A-">A-</option>
                  <option value="B+">B+</option>
                  <option value="B-">B-</option>
                  <option value="AB+">AB+</option>
                  <option value="AB-">AB-</option>
                  <option value="O+">O+</option>
                  <option value="O-">O-</option>
                </Select>
              </FormGroup>
            </FormRow>

            <FormRow>
              <FormGroup style={{ gridColumn: '1 / -1' }}>
                <Label>{t('userpage.address')}</Label>
                <TextArea
                  name="address"
                  value={formData.address || ''}
                  onChange={handleTextAreaChange}
                  placeholder={t('userpage.addressPlaceholder')}
                  disabled={modalMode === 'view'}
                />
              </FormGroup>
            </FormRow>
          </FormSection>

          {/* Organizational Info Section */}
          <FormSection>
            <SectionTitle>{t('userpage.organizationalInfo')}</SectionTitle>
            <FormRow>
              <FormGroup>
                <Label>{t('userpage.department')}</Label>
                <Select
                  name="department"
                  value={formData.department || ''}
                  onChange={handleInputChange}
                  disabled={modalMode === 'view'}
                >
                  <option value="">{t('userpage.selectDepartment')}</option>
                  <option value="IT">{t('userpage.departmentIT')}</option>
                  <option value="Human Resources">{t('userpage.departmentHR')}</option>
                  <option value="Finance">{t('userpage.departmentFinance')}</option>
                  <option value="Marketing">{t('userpage.departmentMarketing')}</option>
                  <option value="Sales">{t('userpage.departmentSales')}</option>
                  <option value="Operations">{t('userpage.departmentOperations')}</option>
                  <option value="Customer Service">{t('userpage.departmentCustomerService')}</option>
                  <option value="Research & Development">{t('userpage.departmentRD')}</option>
                  <option value="Legal">{t('userpage.departmentLegal')}</option>
                  <option value="Administration">{t('userpage.departmentAdmin')}</option>
                </Select>
              </FormGroup>
              <FormGroup>
                <Label>{t('userpage.role')}</Label>
                <Select
                  name="role"
                  value={formData.role || ''}
                  onChange={handleInputChange}
                  disabled={modalMode === 'view'}
                >
                  <option value="">{t('userpage.selectRole')}</option>
                  <option value="Admin">{t('userpage.roleAdmin')}</option>
                  <option value="Manager">{t('userpage.roleManager')}</option>
                  <option value="Team Lead">{t('userpage.roleTeamLead')}</option>
                  <option value="Senior Staff">{t('userpage.roleSeniorStaff')}</option>
                  <option value="Staff">{t('userpage.roleStaff')}</option>
                  <option value="Junior Staff">{t('userpage.roleJuniorStaff')}</option>
                  <option value="Intern">{t('userpage.roleIntern')}</option>
                  <option value="Contractor">{t('userpage.roleContractor')}</option>
                  <option value="Guest">{t('userpage.roleGuest')}</option>
                </Select>
              </FormGroup>
            </FormRow>
          </FormSection>
        </Form>
      </ModalBody>

      {/* Bottom bar: ButtonGroup full width, metadata left, buttons right, all in one bar at modal bottom */}
      <div
        style={{
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-between',
          alignItems: 'flex-end',
          width: '100%',
          borderTop: '1px solid #eee',
          padding: '0 0 0 0',
          marginTop: 16,
          minHeight: 56,
          position: 'relative',
        }}
      >
        {/* Metadata created_at & updated_at */}
        <div style={{
          flex: 1,
          display: 'flex',
          alignItems: 'flex-end',
          minHeight: 56,
          fontSize: 13,
          color: '#888',
          padding: '0 0 12px 20px',
          whiteSpace: 'nowrap',
        }}>
          {/* Always show in format dd/mm/yyyy | HH:mm, even if empty */}
          {(() => {
            const user = selectedUser || formData;
            const formatDateTime = (dt?: string) => {
              if (!dt) return '-';
              const d = new Date(dt);
              if (isNaN(d.getTime())) return '-';
              const day = String(d.getDate()).padStart(2, '0');
              const month = String(d.getMonth() + 1).padStart(2, '0');
              const year = d.getFullYear();
              const hour = String(d.getHours()).padStart(2, '0');
              const min = String(d.getMinutes()).padStart(2, '0');
              return `${day}/${month}/${year} | ${hour}:${min}`;
            };
            return (
              <>
               {modalMode !== 'create' && (
  <div style={{ display: 'flex', gap: 40, alignItems: 'center' }}>
    <span>
      Created At: {formatDateTime(user.created_at)}
    </span>
    <span>
      Last Update: {formatDateTime(user.updated_at)}
    </span>
  </div>
)}

              </>
            );
          })()}
        </div>
        {/* ButtonGroup full width, but align right. Force all buttons to same height, color, and spacing */}
        <div style={{
          flex: 1,
          display: 'flex',
          justifyContent: 'flex-end',
          alignItems: 'flex-end',
          minHeight: 56,
          padding: '0 20px 12px 0',
        }}>
         <ButtonGroup style={{ width: '100%', maxWidth: 0, justifyContent: 'flex-end', gap: 12 }}>
  <CancelButton
    type="button"
    onClick={() => setShowModal(false)}
    className="modal-action-btn cancel"
  >
    {t('userpage.cancel')}
  </CancelButton>

  {modalMode === 'create' && (
    <SubmitButton
      type="submit"
      onClick={handleSubmit}
      className="modal-action-btn submit"
    >
      {t('userpage.create')}
    </SubmitButton>
  )}

  {modalMode === 'edit' && (
    <SubmitButton
      type="submit"
      onClick={handleSubmit}
      className="modal-action-btn submit"
    >
      {t('userpage.update')}
    </SubmitButton>
  )}
</ButtonGroup>

        </div>
      </div>
    </ModalContent>
  </Modal>
)}
    </Container>
  </>
  );
};

export default Solution5;